######################################################################
#
# CONVERTER
#
######################################################################

# Known Parsers detected by file extension.
# Other files or streams will be delegated to OsmXmlParser.

osmParser.pbf = de.cm.osm2po.plugins.OsmPbfParser
osmParser.o5m = de.cm.osm2po.plugins.OsmO5mParser
osmParser.o5m.gz = de.cm.osm2po.plugins.OsmO5mGzParser
osmParser.osm.bz2 = de.cm.osm2po.plugins.OsmXmlBz2Parser

# tileSize is the most important parameter for the conversion
# part. It controls the balance between available memory and
# the data size. The rule is simple: The more memory and the
# larger a tile the better. Examples:
# tileSize = 5x5 (Run with tileSize 5x5)
# tileSize = x, c (Run without tiling and run compression before)
# tileSize = 10x10, 0.5, c (Compress 10x10 with a buffer of 0.5)
# For most countries I recommend tileSize=x,c with -Xmx1408m.

tileSize = x, c 

# A too small tileSize (size and/or buffer) ignores ways which have
# been tagged as one long section. In order to catch these,
# either increase the tileSize values or use the following option.
# Tipp: Read the Log while and/or after conversion,
# osm2po will report a warn message in such a case. 

#fixTileSize = true

# osm2po's Joiner/TileManager must be able to cache lots of
# tiles (nodes). Therefore it has to estimate the remaining ram.
# If osm2po runs into OutOfMemoryErrors here, which mostly happens
# under 64 Bit Java, increase osm2po's own reservedXmx parameter (in Mb).

reservedXmx = 8192

# Skip regions with too few nodes (faster). Default is 0.

tileThreshold = 0

# Usually caching as many tiles as possible is the fastest approach.
# In some cases, mostly if these tiles contain hardly any nodes,
# this optimization may cause the opposite effect.

maxTilesPerLoop = 100

# Very useful Postprocess that renumbers vertexIDs by their location.
  
useQuadTileOrder = true

# In order to modify ways programmatically this is your hook into the Java-API.

#joinInterceptor = de.cm.osm2po.converter.DefaultJoinInterceptor

######################################################################
#
# DEFAULT TAG RESOLVER
#
######################################################################

# A TagResolver translates OSM-tags into a more useful set of information
# like name, speed, usage, ..., etc. If you need a special behavior,
# which cannot be handled by this default mechanism, feel free to implement
# your own TagResolver. The default WayTagResolver utilizes two 32bit-fields
# Each parsed osm-tag can modify flags in one of these fields
# either by allowing/setting bits (or-op.)
# or by denying/resetting bits (deferred inverse-and-op.).
# The default implementation is 'de.cm.osm2po.converter.DefaultWayTagResolver'
# Node- and RelationTagResolvers can only be influenced programmatically.

#wayTagResolver.class = com.to.another.package.YourWayTagResolver
#nodeTagResolver.class = com.to.another.package.YourNodeTagResolver
#relationTagResolver.class = com.to.another.package.YourRelationTagResolver

# Using a prefix allows us to hold different configurations in one file

#wayTagResolver.prefix = wtr

# Custom flags with ascending binary values 1, 2, 4, 8 ...
# You can define up to 32 Flags (Bits).

wtr.flagList = car, bike, foot, rail, ferry
 
# only convert ways containing one of these flags

wtr.finalMask = car
#wtr.finalMask = car|bike
#wtr.finalMask = bike|foot

# very special hint for level_crossing modification

wtr.shuttleTrainMask = rail|car

# Main-Tag definitions. Params 1-4:
# 1) concurrent order
# 2) class (1-127)
# 3) default speed in kmh
# 4) allowed transportation type (optional) - since v4.5.30

wtr.tag.highway.motorway =       1, 11, 130, car
wtr.tag.highway.motorway_link =  1, 12, 50,  car
wtr.tag.highway.trunk =          1, 13, 120,  car
wtr.tag.highway.trunk_link =     1, 14, 50,  car
wtr.tag.highway.primary =        1, 15, 100,  car
wtr.tag.highway.primary_link =   1, 16, 30,  car
wtr.tag.highway.secondary =      1, 21, 100,  car
wtr.tag.highway.secondary_link = 1, 22, 30,  car
wtr.tag.highway.tertiary =       1, 31, 80,  car|bike
wtr.tag.highway.residential =    1, 32, 50,  car|bike
wtr.tag.highway.road =           1, 41, 30,  car|bike
wtr.tag.highway.unclassified =   1, 42, 30,  car|bike
wtr.tag.highway.service =        1, 51, 10,   car|bike
wtr.tag.highway.living_street =  1, 63, 7,   car|bike|foot   
wtr.tag.highway.pedestrian =     1, 62, 5,   bike|foot
wtr.tag.highway.track =          1, 71, 10,  bike|foot
wtr.tag.highway.path =           1, 72, 10,  bike|foot
wtr.tag.highway.cycleway =       1, 81, 15,  bike
wtr.tag.highway.footway =        1, 91, 5,   foot
wtr.tag.highway.steps =          1, 92, 5,   foot
wtr.tag.route.ferry =            2,  1, 10,  ferry
wtr.tag.route.shuttle_train =    2,  2, 50,  rail|car
wtr.tag.railway.rail =           3,  3, 50,  rail

# Other tags may overwrite the transportion type definition above.
# They allow or explicitly deny things, so the finalMask can
# catch or drop a set of tags at the end.
# Tags without explicit values like wtr.deny.motorcar act like
# an else-part and will be used if no other tag=value matches.
# Since Version 4.5.30 you may substitute keys. e.g.
# 'wtr.deny.motor[_vehicle|car]' will be replaced by
# 'wtr.deny.motor_vehicle' and 'wtr.deny.motorcar'.
# Nested expressions like ..[...[...]].. are not supported.

wtr.allow.motor[car|_vehicle].[yes|destination] = car
wtr.allow.[bicycle|cycleway] = bike

wtr.deny.tracktype.grade[4|5] = car|bike
wtr.deny.access.no = car|bike|foot|rail|ferry
wtr.deny.vehicle.no = car|bike
wtr.deny.motor[_vehicle|car] = car
wtr.deny.bicycle.no = bike
wtr.deny.foot.no = foot

# Very important:
# If an OSM-maxSpeed-tag/value exists, it overrides the default
# speeds above. Disable this behavior if not needed, e.g. for bike routing.

wtr.maxSpeedOverrides = true

######################################################################
#
# LOGGER
#
######################################################################

# This is the LogLevel for global (log.level) and console (log.console.level)
# and file logging. Possible values are
# debug, progress, warn, info (default), error and fatal.

log.level = debug
log.file.level = debug
log.console.level = progress
#log.console.writer.class = de.cm.osm2po.logging.Log2poConsoleWriter
#log.console.writer.class = de.cm.osm2po.logging.LogJclWriter

# Redirecting of StandardOut (console).
# Possible values are out (default), err or null (quiet).

#log.console.to = err

######################################################################
#
# POSTPROCESSORS
#
######################################################################

postp.0.class = de.cm.osm2po.converter.PgRoutingWriter

#postp.0.writeMultiLineStrings = true
#postp.1.class = de.cm.osm2po.plugins.PgVertexWriter
#postp.2.class = de.cm.osm2po.converter.MlgBuilder
#postp.2.maxLevel = 3,10
#postp.3.class = de.cm.osm2po.sd.SdGraphBuilder

# postprocessors usually create output files.
# Use this parameter in order to print to stdout (console)

#postp.pipeOut = true
 
# Tip 1:
# If you want this program to be one link in a transformation chain
# e.g. curl | bzcat | osm2po | psql
# you must set both, log.console.to=err and postp.pipeOut=true.
# It is recommended to run curl, bzcat and psql in silent/quiet mode. 
# Example (one line):
# curl -s -L http://download.geofabrik.de/europe/germany/hamburg-latest.osm.bz2 |
# bzcat -c | java -jar osm2po-core-4.jar prefix=hh postp.pipeOut=true log.console.to=err |
# psql -q -U myuser -s -d mydb

# Tip 2:
# If you enable the SdGraphBuilder for Android-Routing it is highly
# recommended to convert with useQuadTileOrder=true before.
# Another performance improvement can be reached by activating the MlgBuilder

######################################################################
#
# OSM2PO-Routing
#
######################################################################

# This pluggable class translates other properties like kmh or flags
# and allows to mix in external data programmatically.

#graph.build.interceptor.class = de.cm.osm2po.converter.DefaultGraphBuildInterceptor

# osm2po doubles segments to handle forward and reverse directions.
# Reverse edges which are derived from one-way-segments are
# written by default. This is useful for bike routing but
# not for car routing and blows up your graph size in memory.
# To exclude these "WrongWays" set the following parameter to true

#graph.build.excludeWrongWays = true

# Runtime parameters for the osm2po-Graph:
# In order to speed up geometry lookups you may want to set
# graph.support.segments=true. This disables HardDisk-Lookups but needs
# much more RAM (Xmx). Setting graph.support.edgeflags=true is useful
# for Soap/GeoJson-Requests. If not set, you will not receive street type infos.
# Setting graph.support.reverse=true creates an additional Reverse-Graph.
# graph.support.raster[.e|.v] is another RAM-consuming addition, which creates
# a rastered index for vertices (v) or edges (e) or if '.e' and '.v'
# are missing, for both. 

#graph.support.segments = true
#graph.support.edgeflags = true
#graph.support.reverse = true
#graph.support.raster = true
#graph.support.raster.e = true
#graph.support.raster.v = true
#graph.support.barriers = true
#graph.support.extensions = true

# Here are osm2po's router implementations. They base on modified
# Dijkstra/AStar algorithms. Ovl-Routers are able to start and finish
# at any point, not only at links. Mlg-Routers need preprocessed data by the
# MlgBuilder (see above), otherwise they will fall back to default behavior.
# The MlgBuilder defines IDs for different use cases, as there are:
# ID  0  : Default Car-Routing with TurnRestrictions.
# ID +1  : For Shortest Path (not recommended)
# ID +2  : Ignore OneWay-Restrictions
# ID +4  : Ignore Turn-Restrictions
# To enable extensions set graph.support.extensions = true (see above)

#router.0.class=de.cm.osm2po.routing.DefaultRouter
#router.1.class=de.cm.osm2po.routing.EdgeRouter
#router.2.class=de.cm.osm2po.routing.PoiRouter
#router.3.class=de.cm.osm2po.routing.OvlRouter
#router.4.class=de.cm.osm2po.routing.OvlEdgeRouter
#router.5.class=de.cm.osm2po.routing.MlgRouter
#router.6.class=de.cm.osm2po.routing.MlgRevRouter
#router.7.class=de.cm.osm2po.routing.MlgBidiRouter
#router.8.class=de.cm.osm2po.routing.MlgOvlEdgeRouter


######################################################################
#
# OSM2PO-TinyWebServer (REST/SOAP)
#
######################################################################

#service.domain = localhost
#service.port = 8888


######################################################################
#
# OSM2PO-Samples (see Plugins Sources)
#
######################################################################

# TrafficSignals-Sample

#nodeClazz.1.name=Traffic Signals
#nodeTagResolver.class=de.cm.osm2po.samples.TrafficSignalsNodeTagResolver
#router.1.class=de.cm.osm2po.samples.TrafficSignalsRouter

